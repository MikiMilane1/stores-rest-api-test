{
	"info": {
		"_postman_id": "165a4128-acda-4a42-bb8f-58143978f19c",
		"name": "Stores REST API for export",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33670599"
	},
	"item": [
		{
			"name": "/auth Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.environment.set(\"access_token\", jsonData.access_token);\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has access_token\", function () {\r",
							"    pm.expect(pm.response.json().access_token).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 150\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(150);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"test_user\",\r\n    \"password\": \"123456\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/auth",
					"host": [
						"{{url}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "/store/test_store Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Store name is returned\", function() {\r",
							"    pm.expect(jsonData.name).to.eql(\"test_store\");\r",
							"})\r",
							"pm.test(\"Store id is returned\", function() {\r",
							"    pm.expect(jsonData.id).to.eql(1);\r",
							"})\r",
							"pm.test(\"Store id is returned\", function() {\r",
							"    pm.expect(jsonData.items.length).to.eql(0);\r",
							"})\r",
							"\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"  pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Response time is less than 150ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(150);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.expect(pm.response.headers.has('Content-Type')).to.be.true;\r",
							"});\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.environment.set(\"store_id\", jsonData.id);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/store/test_store",
					"host": [
						"{{url}}"
					],
					"path": [
						"store",
						"test_store"
					]
				}
			},
			"response": []
		},
		{
			"name": "/item/test_item in test_store Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Item name is returned\", function() {\r",
							"    pm.expect(jsonData.name).to.eql(\"test_item\");\r",
							"})\r",
							"pm.test(\"Item price is returned\", function() {\r",
							"    pm.expect(jsonData.price).to.eql(1.99);\r",
							"})\r",
							"pm.test(\"Successfull POST request\", function () {\r",
							"  pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Response time is less than 150ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(150);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.expect(pm.response.headers.has('Content-Type')).to.be.true;\r",
							"});\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"price\": 1.99,\r\n    \"store_id\": {{store_id}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/item/test_item",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						"test_item"
					]
				}
			},
			"response": []
		},
		{
			"name": "/stores Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Store test_store is returned\", function() {\r",
							"    pm.expect(jsonData.stores[0].name).to.eql(\"test_store\");\r",
							"});\r",
							"pm.test(\"ID of store test_store is returned\", function() {\r",
							"    pm.expect(jsonData.stores[0].id).to.eql(1);\r",
							"});\r",
							"pm.test(\"Item test_item is returned insde test_store \", function() {\r",
							"    pm.expect(jsonData.stores[0].items[0].name).to.eql(\"test_item\");\r",
							"});\r",
							"pm.test(\"Item test_item price is returned insde test_store \", function() {\r",
							"    pm.expect(jsonData.stores[0].items[0].price).to.eql(1.99);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 150ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(150);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.expect(pm.response.headers.has('Content-Type')).to.be.true;\r",
							"});\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/stores",
					"host": [
						"{{url}}"
					],
					"path": [
						"stores"
					]
				}
			},
			"response": []
		},
		{
			"name": "/item/test_item Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Item name is returned\", function() {\r",
							"    pm.expect(jsonData.message).to.eql(\"Item deleted\");\r",
							"})\r",
							"pm.test(\"Successfull POST request\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 150ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(150);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.expect(pm.response.headers.has('Content-Type')).to.be.true;\r",
							"});\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/item/test_item",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						"test_item"
					]
				}
			},
			"response": []
		},
		{
			"name": "/store/test_store Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 150ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(150);\r",
							"});\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Store not found.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Store deleted\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response status code is 404\", function () {\r",
							"  pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Store not found.\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"No store with that name\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/store/test_store",
					"host": [
						"{{url}}"
					],
					"path": [
						"store",
						"test_store"
					]
				}
			},
			"response": []
		}
	]
}